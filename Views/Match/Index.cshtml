@model List<Match>

@{
    ViewData["Title"] = "Matches";
    var currentDateString = Context.Request.Query["date"].ToString();
    DateTime baseDate = string.IsNullOrEmpty(currentDateString)
        ? DateTime.Today
        : DateTime.Parse(currentDateString);

    var yesterday = baseDate.AddDays(-1).ToString("yyyy-MM-dd");
    var tomorrow = baseDate.AddDays(1).ToString("yyyy-MM-dd");
    var isToday = baseDate.Date == DateTime.Today;
}

<style>
    body {
        background-color: #f8fafc;
        font-family: 'Inter', sans-serif;
        color: #1e293b;
    }

    .container {
        max-width: 1200px;
        margin: auto;
    }

    .match-card {
        background-color: #fff;
        border-radius: 1rem;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
        cursor: pointer;
        border: 1px solid #e2e8f0;
    }

        .match-card:hover {
            transform: scale(1.01);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
            border-left: 4px solid #3b82f6;
        }

    .match-header {
        background: linear-gradient(to right, #3b82f6, #2563eb);
        padding: 0.75rem 2rem;
        color: white;
        font-size: 1.2rem;
        font-weight: 600;
        border-radius: 0.75rem;
        text-align: center;
    }

    .team-logo {
        width: 64px;
        height: 64px;
        object-fit: contain;
        border-radius: 8px;
        margin-bottom: 0.5rem;
    }

    .team-name {
        font-weight: 600;
        font-size: 1rem;
        color: #1e293b;
    }

    .match-time {
        font-size: 1.2rem;
        font-weight: 600;
        color: #2563eb;
    }

    .countdown {
        font-size: 0.9rem;
        font-weight: 500;
    }

    .started {
        color: #ef4444;
        font-weight: bold;
    }

    .upcoming {
        color: #16a34a;
        font-weight: bold;
    }

    .match-info {
        font-size: 0.9rem;
        color: #6b7280;
    }

    .no-matches {
        background-color: #fef3c7;
        padding: 1.5rem;
        border-radius: 0.75rem;
        color: #92400e;
        text-align: center;
        font-weight: 500;
    }

    .btn-nav {
        font-weight: 500;
        border-radius: 0.5rem;
    }

    @@media (max-width: 768px) {
        .match-time

    {
        font-size: 1rem;
    }

    .team-logo {
        width: 50px;
        height: 50px;
    }

    .team-name {
        font-size: 0.95rem;
    }

    .match-header {
        font-size: 1rem;
        padding: 0.5rem 1rem;
    }

    }
</style>


<div class="container py-5 mb-5">
    <div class="d-flex justify-content-between align-items-center mb-5">
        <h2 class="fw-bold text-dark">📅 Match Schedule</h2>
        @if (User.IsInRole("Admin"))
        {
            <div class="admin-actions d-flex gap-2">
                <a asp-action="Add" class="btn btn-outline-success">
                    <i class="bi bi-plus-circle me-1"></i> Add Match
                </a>
                <a asp-action="Clear" class="btn btn-outline-danger"
                   onclick="return confirm('Are you sure you want to remove all matches?')">
                    <i class="bi bi-trash3 me-1"></i> Clear All
                </a>
            </div>
        }
    </div>

    <div class="d-flex justify-content-center align-items-center mb-5 gap-3">
        <a asp-action="GetByDate" asp-route-date="@yesterday" class="btn btn-outline-secondary btn-nav">
            <i class="bi bi-chevron-left me-1"></i> Yesterday
        </a>
        <div class="match-header">
            @baseDate.ToString("dddd, MMMM dd, yyyy")
        </div>
        <a asp-action="GetByDate" asp-route-date="@tomorrow" class="btn btn-outline-secondary btn-nav">
            Tomorrow <i class="bi bi-chevron-right ms-1"></i>
        </a>
    </div>

    @if (!Model.Any())
    {
        <div class="no-matches">
            <i class="bi bi-info-circle me-1"></i> No matches scheduled for this day.
        </div>
    }
    else
    {
        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-2 g-4" id="matchList">
            @foreach (var item in Model)
            {
                <div class="col">
                    <div class="card match-card h-100" role="button" aria-label="View match details"
                         onclick="window.location='@Url.Action("Details", new { id = item.Id })'">
                        <div class="card-body p-4 d-flex flex-column gap-3">
                            <div class="d-flex justify-content-between align-items-center">
                                <div class="text-center">
                                    <img src="/@FileSetting.TeamImagesFolderPath/@item.HomeTeam.LogoPath" class="team-logo mb-2" alt="@item.HomeTeam.Name logo" />
                                    <div class="team-name">@item.HomeTeam.Name</div>
                                </div>
                                <div class="text-center">
                                    <div class="text-muted small">@item.MatchDate.ToString("MMM dd, yyyy")</div>
                                    <div class="match-time">@item.MatchDate.ToString("hh:mm tt")</div>
                                    <div class="countdown" id="countdown-@item.Id">⏳</div>
                                </div>
                                <div class="text-center">
                                    <img src="/@FileSetting.TeamImagesFolderPath/@item.AwayTeam.LogoPath" class="team-logo mb-2" alt="@item.AwayTeam.Name logo" />
                                    <div class="team-name">@item.AwayTeam.Name</div>
                                </div>
                            </div>
                            <div class="text-center text-muted">
                                <i class="bi bi-geo-alt-fill text-warning me-1"></i>
                                <span class="fw-medium">@item.StadiumName</span>
                                <div class="small">@item.Location</div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@section Scripts {
    
    <script>
        const matches = [
            @foreach (var item in Model)
            {
                    <text>{ id: '@item.Id', matchTime: new Date(@item.MatchDate.Year, @item.MatchDate.Month - 1, @item.MatchDate.Day, @item.MatchDate.Hour, @item.MatchDate.Minute, @item.MatchDate.Second) },</text>
            }
        ];

        matches.forEach(match => {
            const el = document.getElementById(`countdown-${match.id}`);
            if (!el) return;

            function updateCountdown() {
                const now = new Date();
                const diff = match.matchTime - now;

                if (diff <= 0) {
                    el.innerHTML = "<span class='started'>Live!</span>";
                    clearInterval(interval);
                    return;
                }

                const days = Math.floor(diff / (1000 * 60 * 60 * 60 * 24));
                const hours = Math.floor((diff / (1000 * 60 * 60)) % 24);
                const minutes = Math.floor((diff / (1000 * 60)) % 60);
                const seconds = Math.floor((diff / 1000) % 60);

                el.innerHTML = `<span class='upcoming'>${days}d ${hours}h ${minutes}m ${seconds}s</span>`;
            }

            updateCountdown();
            const interval = setInterval(updateCountdown, 1000);
        });
    </script>
}